
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON EQ ID LPAREN LT NUMBER PLUS RPAREN STRINGstatement : if_statement\n                 | elif_statement\n                 | else_statement\n                 | print_statement\n                 | for_statement\n                 | while_statement\n                 | assignment_statement\n                 | declaration_statementdeclaration_statement : ID EQ NUMBERif_statement : ID expression COLON blockelif_statement : ID expression COLON blockelse_statement : ID COLON blockprint_statement : ID LPAREN STRING RPARENfor_statement : ID ID ID expression COLON blockwhile_statement : ID expression COLON blockassignment_statement : ID EQ expressionexpression : ID LT IDexpression : ID LPAREN ID RPARENexpression : ID\n                  | NUMBERexpression : expression PLUS expressionblock : statement block\n             | statement'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,17,18,19,20,21,22,23,25,26,27,29,31,32,33,34,35,36,37,],[10,-1,-2,-3,-4,-5,-6,-7,-8,11,17,10,25,-20,25,29,30,10,25,-12,10,-19,-16,-9,-17,-10,-21,-22,-13,10,-18,-14,]),'$end':([1,2,3,4,5,6,7,8,9,16,22,23,25,26,27,29,31,32,33,34,36,37,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-20,-12,-23,-19,-16,-9,-17,-10,-21,-22,-13,-18,-14,]),'COLON':([10,11,12,16,25,28,29,32,36,],[13,-19,20,-20,-19,35,-17,-21,-18,]),'LPAREN':([10,11,25,],[14,19,19,]),'EQ':([10,],[15,]),'NUMBER':([10,15,17,21,],[16,27,16,16,]),'LT':([11,25,],[18,18,]),'PLUS':([11,12,16,25,26,27,28,29,32,36,],[-19,21,-20,-19,21,-20,21,-17,21,-18,]),'STRING':([14,],[24,]),'RPAREN':([24,30,],[34,36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,13,20,23,35,],[1,23,23,23,23,]),'if_statement':([0,13,20,23,35,],[2,2,2,2,2,]),'elif_statement':([0,13,20,23,35,],[3,3,3,3,3,]),'else_statement':([0,13,20,23,35,],[4,4,4,4,4,]),'print_statement':([0,13,20,23,35,],[5,5,5,5,5,]),'for_statement':([0,13,20,23,35,],[6,6,6,6,6,]),'while_statement':([0,13,20,23,35,],[7,7,7,7,7,]),'assignment_statement':([0,13,20,23,35,],[8,8,8,8,8,]),'declaration_statement':([0,13,20,23,35,],[9,9,9,9,9,]),'expression':([10,15,17,21,],[12,26,28,32,]),'block':([13,20,23,35,],[22,31,33,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> if_statement','statement',1,'p_statement_expr','parser.py',54),
  ('statement -> elif_statement','statement',1,'p_statement_expr','parser.py',55),
  ('statement -> else_statement','statement',1,'p_statement_expr','parser.py',56),
  ('statement -> print_statement','statement',1,'p_statement_expr','parser.py',57),
  ('statement -> for_statement','statement',1,'p_statement_expr','parser.py',58),
  ('statement -> while_statement','statement',1,'p_statement_expr','parser.py',59),
  ('statement -> assignment_statement','statement',1,'p_statement_expr','parser.py',60),
  ('statement -> declaration_statement','statement',1,'p_statement_expr','parser.py',61),
  ('declaration_statement -> ID EQ NUMBER','declaration_statement',3,'p_declaration_statement','parser.py',65),
  ('if_statement -> ID expression COLON block','if_statement',4,'p_if_statement','parser.py',71),
  ('elif_statement -> ID expression COLON block','elif_statement',4,'p_elif_statement','parser.py',75),
  ('else_statement -> ID COLON block','else_statement',3,'p_else_statement','parser.py',79),
  ('print_statement -> ID LPAREN STRING RPAREN','print_statement',4,'p_print_statement','parser.py',83),
  ('for_statement -> ID ID ID expression COLON block','for_statement',6,'p_for_statement','parser.py',87),
  ('while_statement -> ID expression COLON block','while_statement',4,'p_while_statement','parser.py',91),
  ('assignment_statement -> ID EQ expression','assignment_statement',3,'p_assignment_statement','parser.py',96),
  ('expression -> ID LT ID','expression',3,'p_expression_condition','parser.py',103),
  ('expression -> ID LPAREN ID RPAREN','expression',4,'p_expression_range','parser.py',107),
  ('expression -> ID','expression',1,'p_expression_simple','parser.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_simple','parser.py',112),
  ('expression -> expression PLUS expression','expression',3,'p_expression_addition','parser.py',116),
  ('block -> statement block','block',2,'p_block_statements','parser.py',120),
  ('block -> statement','block',1,'p_block_statements','parser.py',121),
]
